var N=null,E="",T="t",U="u",searchIndex={};
var R=["computedtask","gwasm_api","compute","A convenience function for running a gWasm [`Task`] on Golem","duration","option","timeout","subtask_timeout","error","result","Task's name","subtasks","gwasm_api::prelude","gwasm_api::error","to_string","try_from","try_into","borrow_mut","to_owned","gwasm_api::golem","clone_into","type_id","gwasm_api::task","borrow","typeid","gwasm_api::timeout","formatter","options","from_str","backtrace","serialize","GWasmBinary","ComputedTask","ComputedSubtask","TaskBuilder","ProgressUpdate","TaskStatus"];

searchIndex["gwasm_api"]={"doc":"gwasm-api - gWasm API for Rust apps gWasm is Golem's new…","i":[[4,"Net",R[1],E,N,N],[13,"TestNet",E,E,0,N],[13,"MainNet",E,E,0,N],[5,R[2],E,R[3],N,[[["p"],["u16"],["s"],["net"],["task"]],[[R[8]],[R[0]],[R[9],[R[0],R[8]]]]]],[0,R[8],E,"Errors that can be returned by the library",N,N],[4,"Error",R[13],"Enum wrapping all possible errors that can be generated by…",N,N],[13,"MailboxError",E,"Wraps actix's `MailboxError` error",1,N],[13,"TimerError",E,"Wraps tokio's `timer::Error` error",1,N],[13,"IOError",E,"Wraps libstd's `std::io::Error` error",1,N],[13,"WampError",E,"Wraps Golem's `actix_wamp::Error` error",1,N],[13,"GolemRPCError",E,"Wraps Golem RPC's `golem_rpc_api::Error` error",1,N],[13,"KeyboardInterrupt",E,"Wraps `tokio_ctrlc_error::KeyboardInterrupt` which is used…",1,N],[13,"CtrlcError",E,"Wraps other `tokio_ctrlc_error::IoError` type errors",1,N],[13,"ChronoError",E,"Wraps `chrono::ParseError` error",1,N],[13,"ZeroTimeoutError",E,"Error generated when trying to create a zero `Timeout`…",1,N],[13,"EmptyTaskInfo",E,"Error when no TaskInfo is received when polling for task…",1,N],[13,"EmptyProgress",E,"Error when no progress can be extracted from TaskInfo",1,N],[13,"TaskAborted",E,"Error when gWasm task was aborted externally",1,N],[13,"TaskTimedOut",E,"Error when gWasm task timed out",1,N],[0,"golem",R[1],"Convenience async functions for creating gWasm tasks,…",N,N],[3,R[36],R[19],"Stores current status of gWasm task",N,N],[5,R[2],E,R[3],N,[[[R[5],[R[4]]],[R[4]],["net"],["p"],["u16"],["s"],["task"]]]],[5,"create_task",E,"A convenience function for creating a gWasm [`Task`] on…",N,[[["path"],["u16"],["net"],["str"],["task"]]]],[5,"poll_task_progress",E,"A convenience function for polling gWasm [`Task`]'s…",N,[[[R[5],[R[4]]],["string"],[R[4]]]]],[0,"task",R[1],"Convenience types for creating and managing gWasm tasks",N,N],[3,R[31],R[22],"Wrapper type for easy passing of gWasm binary",N,N],[12,"js",E,"Contents of JavaScript file generated by Emscripten",2,N],[12,"wasm",E,"Contents of Wasm file generated by Emscripten",2,N],[3,R[34],E,"gWasm task builder",N,N],[3,"Task",E,"Struct representing gWasm task",N,N],[3,"Options",E,"Struct representing gWasm task's options substructure",N,N],[3,"Subtask",E,"Struct representing gWasm task's subtask substructure",N,N],[3,R[32],E,"Struct representing computed gWasm task",N,N],[12,"name",E,R[10],3,N],[12,"bid",E,"Used task bid value",3,N],[12,R[6],E,"Used task [`Timeout`] value",3,N],[12,R[7],E,"Used subtask [`Timeout`] value",3,N],[12,R[11],E,"[`Vec`] of [`ComputedSubtask`]s, ordered by subtask data…",3,N],[3,R[33],E,"Struct representing computed subtask",N,N],[12,"data",E,"[`BTreeMap`] of results for the `ComputedSubtask` where…",4,N],[11,"new",E,"Creates new `TaskBuilder` from workspace `Path` and…",5,[[["asref",["path"]],["path"],["gwasmbinary"]],["self"]]],[11,"name",E,"Sets task's name",5,[[["str"],["asref",["str"]]],["self"]]],[11,"bid",E,"Sets task's bid value",5,[[["f64"]],["self"]]],[11,R[6],E,"Sets task's `Timeout` value",5,[[[R[6]]],["self"]]],[11,R[7],E,"Sets subtasks' `Timeout` value",5,[[[R[6]]],["self"]]],[11,"push_subtask_data",E,"Pushes subtask data into the buffer",5,[[["into",["vec"]],["vec",["u8"]]],["self"]]],[11,"build",E,"Consumes this builder and creates a `Task`",5,[[],[[R[8]],[R[9],["task",R[8]]],["task"]]]],[11,"name",E,R[10],6,[[["self"]],["str"]]],[11,"bid",E,"Task's bid value",6,[[["self"]],["f64"]]],[11,R[6],E,"Task's `Timeout` value",6,[[["self"]],[R[6]]]],[11,R[7],E,"Subtasks' `Timeout` value",6,[[["self"]],[R[6]]]],[11,R[27],E,"`Options` substructure",6,[[["self"]],[R[27]]]],[11,"js_name",E,"Name of the JavaScript file",7,[[["self"]],["str"]]],[11,"wasm_name",E,"Name of the Wasm binary",7,[[["self"]],["str"]]],[11,"input_dir_path",E,"Path to the task's input dir",7,[[["self"]],["path"]]],[11,"output_dir_path",E,"Path to the task's output dir",7,[[["self"]],["path"]]],[11,R[11],E,"Returns an [`Iterator`] over created [`Subtask`]'s",7,[[["self"]]]],[11,"exec_args",E,"Returns an [`Iterator`] over the execution arguments of…",8,[[["self"]]]],[11,"output_file_paths",E,"Returns an [`Iterator`] over the output file paths of this…",8,[[["self"]]]],[0,R[6],R[1],"Types representing Golem Task's timeout values",N,N],[3,"Timeout",R[25],"Wrapper type for [`NaiveTime`]",N,N],[0,"prelude",R[1],"The `gwasm-api` prelude",N,N],[4,"Net",R[12],E,N,N],[13,"TestNet",E,E,0,N],[13,"MainNet",E,E,0,N],[8,R[35],R[1],"Trait specifying the required interface for an object…",N,N],[10,"update",E,"Called when progress value was polled from Golem",9,[[["self"],["f64"]]]],[11,"start",E,"Called when progress updates started",9,[[["self"]]]],[11,"stop",E,"Called when progress updates finished",9,[[["self"]]]],[11,R[18],R[12],E,0,[[["self"]],[T]]],[11,R[20],E,E,0,[[["self"],[T]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[14],E,E,0,[[["self"]],["string"]]],[11,R[15],E,E,0,[[[U]],[R[9]]]],[11,R[16],E,E,0,[[],[R[9]]]],[11,R[23],E,E,0,[[["self"]],[T]]],[11,R[17],E,E,0,[[["self"]],[T]]],[11,R[21],E,E,0,[[["self"]],[R[24]]]],[11,"vzip",E,E,0,[[],["v"]]],[11,"from",R[13],E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[14],E,E,1,[[["self"]],["string"]]],[11,R[15],E,E,1,[[[U]],[R[9]]]],[11,R[16],E,E,1,[[],[R[9]]]],[11,R[23],E,E,1,[[["self"]],[T]]],[11,R[17],E,E,1,[[["self"]],[T]]],[11,R[21],E,E,1,[[["self"]],[R[24]]]],[11,"as_fail",E,E,1,[[["self"]],["fail"]]],[11,"vzip",E,E,1,[[],["v"]]],[11,R[18],R[19],E,10,[[["self"]],[T]]],[11,R[20],E,E,10,[[["self"],[T]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,"into",E,E,10,[[],[U]]],[11,R[15],E,E,10,[[[U]],[R[9]]]],[11,R[16],E,E,10,[[],[R[9]]]],[11,R[23],E,E,10,[[["self"]],[T]]],[11,R[17],E,E,10,[[["self"]],[T]]],[11,R[21],E,E,10,[[["self"]],[R[24]]]],[11,"vzip",E,E,10,[[],["v"]]],[11,"from",R[22],E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[15],E,E,2,[[[U]],[R[9]]]],[11,R[16],E,E,2,[[],[R[9]]]],[11,R[23],E,E,2,[[["self"]],[T]]],[11,R[17],E,E,2,[[["self"]],[T]]],[11,R[21],E,E,2,[[["self"]],[R[24]]]],[11,"vzip",E,E,2,[[],["v"]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[15],E,E,5,[[[U]],[R[9]]]],[11,R[16],E,E,5,[[],[R[9]]]],[11,R[23],E,E,5,[[["self"]],[T]]],[11,R[17],E,E,5,[[["self"]],[T]]],[11,R[21],E,E,5,[[["self"]],[R[24]]]],[11,"vzip",E,E,5,[[],["v"]]],[11,R[18],E,E,6,[[["self"]],[T]]],[11,R[20],E,E,6,[[["self"],[T]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[15],E,E,6,[[[U]],[R[9]]]],[11,R[16],E,E,6,[[],[R[9]]]],[11,R[23],E,E,6,[[["self"]],[T]]],[11,R[17],E,E,6,[[["self"]],[T]]],[11,R[21],E,E,6,[[["self"]],[R[24]]]],[11,"vzip",E,E,6,[[],["v"]]],[11,R[18],E,E,7,[[["self"]],[T]]],[11,R[20],E,E,7,[[["self"],[T]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[15],E,E,7,[[[U]],[R[9]]]],[11,R[16],E,E,7,[[],[R[9]]]],[11,R[23],E,E,7,[[["self"]],[T]]],[11,R[17],E,E,7,[[["self"]],[T]]],[11,R[21],E,E,7,[[["self"]],[R[24]]]],[11,"vzip",E,E,7,[[],["v"]]],[11,R[18],E,E,8,[[["self"]],[T]]],[11,R[20],E,E,8,[[["self"],[T]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[15],E,E,8,[[[U]],[R[9]]]],[11,R[16],E,E,8,[[],[R[9]]]],[11,R[23],E,E,8,[[["self"]],[T]]],[11,R[17],E,E,8,[[["self"]],[T]]],[11,R[21],E,E,8,[[["self"]],[R[24]]]],[11,"vzip",E,E,8,[[],["v"]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[15],E,E,3,[[[U]],[R[9]]]],[11,R[16],E,E,3,[[],[R[9]]]],[11,R[23],E,E,3,[[["self"]],[T]]],[11,R[17],E,E,3,[[["self"]],[T]]],[11,R[21],E,E,3,[[["self"]],[R[24]]]],[11,"vzip",E,E,3,[[],["v"]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[15],E,E,4,[[[U]],[R[9]]]],[11,R[16],E,E,4,[[],[R[9]]]],[11,R[23],E,E,4,[[["self"]],[T]]],[11,R[17],E,E,4,[[["self"]],[T]]],[11,R[21],E,E,4,[[["self"]],[R[24]]]],[11,"vzip",E,E,4,[[],["v"]]],[11,R[18],R[25],E,11,[[["self"]],[T]]],[11,R[20],E,E,11,[[["self"],[T]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,"into",E,E,11,[[],[U]]],[11,R[15],E,E,11,[[[U]],[R[9]]]],[11,R[16],E,E,11,[[],[R[9]]]],[11,R[23],E,E,11,[[["self"]],[T]]],[11,R[17],E,E,11,[[["self"]],[T]]],[11,R[21],E,E,11,[[["self"]],[R[24]]]],[11,"vzip",E,E,11,[[],["v"]]],[11,"fmt",R[12],E,0,[[["self"],[R[26]]],[[R[8]],[R[9],[R[8]]]]]],[11,"clone",E,E,0,[[["self"]],["net"]]],[11,"fmt",E,E,0,[[["self"],[R[26]]],[[R[8]],[R[9],[R[8]]]]]],[11,R[28],E,E,0,[[["str"]],[[R[9],["net"]],["net"]]]],[11,"default",R[19],E,10,[[],["self"]]],[11,"clone",E,E,10,[[["self"]],["taskstatus"]]],[11,"clone",R[22],E,6,[[["self"]],["task"]]],[11,"clone",E,E,7,[[["self"]],[R[27]]]],[11,"clone",E,E,8,[[["self"]],["subtask"]]],[11,"clone",R[25],E,11,[[["self"]],[R[6]]]],[11,"eq",E,E,11,[[["self"],[R[6]]],["bool"]]],[11,"ne",E,E,11,[[["self"],[R[6]]],["bool"]]],[11,"from",R[13],E,1,[[[R[8]]],["self"]]],[11,"from",E,E,1,[[["mailboxerror"]],["self"]]],[11,"from",E,E,1,[[[R[8]]],["self"]]],[11,"from",E,E,1,[[[R[8]]],["self"]]],[11,"from",E,E,1,[[[R[8]]],["self"]]],[11,"from",E,E,1,[[["ioerror"]],["self"]]],[11,"from",E,E,1,[[["keyboardinterrupt"]],["self"]]],[11,"from",E,E,1,[[["parseerror"]],["self"]]],[11,"fmt",E,E,1,[[["self"],[R[26]]],[R[9]]]],[11,"fmt",E,E,1,[[["self"],[R[26]]],[R[9]]]],[11,"fmt",R[22],E,2,[[["self"],[R[26]]],[R[9]]]],[11,"fmt",E,E,5,[[["self"],[R[26]]],[R[9]]]],[11,"fmt",E,E,6,[[["self"],[R[26]]],[R[9]]]],[11,"fmt",E,E,7,[[["self"],[R[26]]],[R[9]]]],[11,"fmt",E,E,8,[[["self"],[R[26]]],[R[9]]]],[11,"fmt",E,E,3,[[["self"],[R[26]]],[R[9]]]],[11,"fmt",E,E,4,[[["self"],[R[26]]],[R[9]]]],[11,"fmt",R[25],E,11,[[["self"],[R[26]]],[R[9]]]],[11,R[15],R[22],E,3,[[["task"]],[[R[9],[R[8]]],[R[8]]]]],[11,R[28],R[25],E,11,[[["str"]],[[R[9],[R[8]]],[R[8]]]]],[11,"name",R[13],E,1,[[["self"]],[[R[5],["str"]],["str"]]]],[11,"cause",E,E,1,[[["self"]],[["fail"],[R[5],["fail"]]]]],[11,R[29],E,E,1,[[["self"]],[[R[5],[R[29]]],[R[29]]]]],[11,R[30],R[22],E,6,[[["self"],["__s"]],[R[9]]]],[11,R[30],E,E,7,[[["self"],["__s"]],[R[9]]]],[11,R[30],E,E,8,[[["self"],["__s"]],[R[9]]]],[11,R[30],R[25],E,11,[[["self"],["__s"]],[R[9]]]]],"p":[[4,"Net"],[4,"Error"],[3,R[31]],[3,R[32]],[3,R[33]],[3,R[34]],[3,"Task"],[3,"Options"],[3,"Subtask"],[8,R[35]],[3,R[36]],[3,"Timeout"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);