//! Errors that can be returned by the library
use actix::MailboxError;
use failure::Fail;
use std::io;
use tokio::timer;

/// Enum wrapping all possible errors that can be generated by the library
#[derive(Debug, Fail)]
pub enum Error {
    /// Wraps actix's `MailboxError` error
    #[fail(display = "internal gWasm API error: {}", _0)]
    MailboxError(MailboxError),

    /// Wraps tokio's `timer::Error` error
    #[fail(display = "internal gWasm API error: {}", _0)]
    TimerError(timer::Error),

    /// Wraps libstd's `std::io::Error` error
    #[fail(display = "internal gWasm API error: {}", _0)]
    IOError(io::Error),

    /// Wraps Golem's `actix_wamp::Error` error
    #[fail(display = "internal Golem error: {}", _0)]
    WampError(actix_wamp::Error),

    /// Wraps Golem RPC's `golem_rpc_api::Error` error
    #[fail(display = "internal Golem error: {}", _0)]
    GolemRPCError(golem_rpc_api::Error),

    /// Wraps `tokio_ctrlc_error::KeyboardInterrupt` which is used to handle
    /// Ctrl-C interrupt event for the lib's client
    #[fail(display = "received Ctrl-C interrupt")]
    KeyboardInterrupt(tokio_ctrlc_error::KeyboardInterrupt),

    /// Wraps other `tokio_ctrlc_error::IoError` type errors
    #[fail(display = "internal gWasm API error: {}", _0)]
    CtrlcError(tokio_ctrlc_error::IoError),

    /// Wraps `chrono::ParseError` error
    #[fail(display = "error parsing Timeout value: {}", _0)]
    ChronoError(chrono::ParseError),

    /// Error generated when trying to create a zero [`Timeout`](../timeout/struct.Timeout.html)
    /// value for a Golem Task
    #[fail(display = "zero timeout \"00:00:00\" is forbidden")]
    ZeroTimeoutError,

    /// Error when no TaskInfo is received when polling for task progress
    /// in [`poll_task_progress`](../golem/fn.poll_task_progress.html)
    #[fail(display = "empty TaskInfo received from Golem")]
    EmptyTaskInfo,

    /// Error when no progress can be extracted from TaskInfo
    #[fail(display = "empty progress in TaskInfo")]
    EmptyProgress,

    /// Error when gWasm task was aborted externally
    #[fail(display = "task aborted externally")]
    TaskAborted,

    /// Error when gWasm task timed out
    #[fail(display = "task timed out")]
    TaskTimedOut,
}

impl From<io::Error> for Error {
    fn from(err: io::Error) -> Self {
        Error::IOError(err)
    }
}

impl From<MailboxError> for Error {
    fn from(err: MailboxError) -> Self {
        Error::MailboxError(err)
    }
}

impl From<timer::Error> for Error {
    fn from(err: timer::Error) -> Self {
        Error::TimerError(err)
    }
}

impl From<actix_wamp::Error> for Error {
    fn from(err: actix_wamp::Error) -> Self {
        Error::WampError(err)
    }
}

impl From<golem_rpc_api::Error> for Error {
    fn from(err: golem_rpc_api::Error) -> Self {
        Error::GolemRPCError(err)
    }
}

impl From<tokio_ctrlc_error::IoError> for Error {
    fn from(err: tokio_ctrlc_error::IoError) -> Self {
        Error::CtrlcError(err)
    }
}

impl From<tokio_ctrlc_error::KeyboardInterrupt> for Error {
    fn from(err: tokio_ctrlc_error::KeyboardInterrupt) -> Self {
        Error::KeyboardInterrupt(err)
    }
}

impl From<chrono::ParseError> for Error {
    fn from(err: chrono::ParseError) -> Self {
        Error::ChronoError(err)
    }
}
